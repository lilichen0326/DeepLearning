% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 24-Mar-2019 15:08:52

%   load the wine dataset
[x, t] = wine_dataset;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

%initialize accuracy and input to 0
accu = zeros(1,10);
input = zeros(1,10);

for i = 0:9
    input(1,i+1) = i;
    bias(1:10, 1) = i;
    net.b{1} = bias;


    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;

    % Train the Network
    [net,tr] = train(net,x,t);

    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y)
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind)
    accu(1,i+1) = 1-percentErrors;
end


% plot the graph
plot(input, accu)
title('Q1 Relationship between Bias and Accuracy')
xlabel('Bias')
ylabel('Accuracy')
