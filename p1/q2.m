% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 24-Mar-2019 13:57:33


%   load the wine dataset
[x, t] = wine_dataset;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

hiddenLayerSize = 10;

accu = zeros(1,9);
input = zeros(1,9);

for i = 0:8
    input(1,i+1) = 100-i*10;

    % Create a Pattern Recognition Network
    net = patternnet(hiddenLayerSize, trainFcn);
    

    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = (100-i*10)/100;
    net.divideParam.valRatio = (i*10)/200;
    net.divideParam.testRatio = (i*10)/200;

    % Train the Network
    [net,tr] = train(net,x,t);

    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y);
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);
    accu(1,i+1) = 1-percentErrors;
end

% plot the graph
plot(input, accu)
title('Q2 Percentage of Traning Set and Accurary')
xlabel('Percentage of Traning Set')
ylabel('Accuracy')

